/*You are given a string s.

You can perform the following process on s any number of times:

Choose an index i in the string such that there is at least one character to the left of index i that is equal to s[i], and at least one character to the right that is also equal to s[i].
Delete the closest character to the left of index i that is equal to s[i].
Delete the closest character to the right of index i that is equal to s[i].
Return the minimum length of the final string s that you can achieve.

 

Example 1:

Input: s = "abaacbcbb"

Output: 5

Explanation:
We do the following operations:

Choose index 2, then remove the characters at indices 0 and 3. The resulting string is s = "bacbcbb".
Choose index 3, then remove the characters at indices 0 and 5. The resulting string is s = "acbcb".
Example 2:

Input: s = "aa"

Output: 2

Explanation:
We cannot perform any operations, so we return the length of the original string.

 

Constraints:

1 <= s.length <= 2 * 105
s consists only of lowercase English letters.*/
class Solution {
    public int minimumLength(String s) {
        boolean[] removed = new boolean[s.length()];
        boolean changed;

        do {
            changed = false;
            for (int i = 1; i < s.length() - 1; i++) {
                if (removed[i]) continue;
                
                char current = s.charAt(i);
                int left = i - 1;
                int right = i + 1;

                // Find the closest left character that is not removed and is equal to current
                while (left >= 0 && (removed[left] || s.charAt(left) != current)) {
                    left--;
                }

                // Find the closest right character that is not removed and is equal to current
                while (right < s.length() && (removed[right] || s.charAt(right) != current)) {
                    right++;
                }

                // If we find valid left and right characters
                if (left >= 0 && right < s.length() && s.charAt(left) == current && s.charAt(right) == current) {
                    removed[left] = true;
                    removed[right] = true;
                    changed = true;
                }
            }
        } while (changed);

        // Calculate the length of the final string
        int resultLength = 0;
        for (boolean isRemoved : removed) {
            if (!isRemoved) {
                resultLength++;
            }
        }

        return resultLength;
    }

    public static void main(String[] args) {
        Solution sol = new Solution();

        String s1 = "abaacbcbb";
        String s2 = "aa";

        System.out.println(sol.minimumLength(s1)); // Output: 5
        System.out.println(sol.minimumLength(s2)); // Output: 2
    }
}
